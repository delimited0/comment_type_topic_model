opinion.dtm.count <- rowSums(as.matrix(opinion.dtm))
sum(opinion.dtm.count==0)
opinion.dtm.zero.idx <- which(opinion.dtm.count == 0)
opinion.docs <- Corpus(VectorSource(opinion$article[-opinion.dtm.zero.idx]))
opinion.dtm <- DocumentTermMatrix(transformCorpus(opinion.docs))
period_identity <- function(dates, level) {
# periodIdentity
# Creates vector of period identities, such that documents with same
# level are assigned to the same period
# Requires lubridate
# dates - vector, dates
# level - function, that gets time level from a date. eg, "month"
dates <- dates[order(dates)]
identity <- rep(1, length(dates))
currIdentity <- 1
prevLevel <- level(dates[1])
for (i in 2:length(dates)) {
currLevel <- level(dates[i])
if (currLevel != prevLevel)
currIdentity <- currIdentity + 1
identity[i] <- currIdentity
prevLevel <- currLevel
}
return(identity)
}
period_identity(opinion, "monht")
period_identity(opinion, "month")
period_identity(opinion$date, "month")
level
factor
level
base::level
foo = period_identity(opinion$date, month)
foo
dir()
ls9)
ls()
opinion <- readArticles("/Users/patrickding/Documents/Projects/TopicModel/opinion.csv")
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
rm(opinion.docs)
rm(opinion.dtm)
opinion_dtm <- DocumentTermMatrix(opinion_docs)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
opinion_docs <- Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx]))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
dim(opinion_dtm)
opinion_docs <- Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx,]))
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx])))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
dim(opinion_dtm)
period
periods
document
doc
opinion_dtm[1,]
typeof(opinion_dtm[1,])
is.object(opinion_dtm[1,])
isS4(opinion_dtm[1,])
class(opinion_dtm[1,])
class(opinion_dtm[1,]) == "DocumentTermMatrix"
if(class(opinion_dtm[1,]) == "DocumentTermMatrix")
print(hi)
library(topicmodels)
?dtm2ldaformat
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
opinion_dat = dtm2ldaformat(opinion_dtm)
dim(opinion_dat[1])
dim(opinion_dat[[1])
dim(opinion_dat[[1]])
dim(opinion_dat[[2]])
opinion_dat[[1]]
length(opinion_dat[[1]])
opinion_dat[[1]][1]
library(lda)
?lexicalize
opinion_dat$vocav
opinion_dat$vocab
opinion_dat$vocab[1]
opinion_dat$vocab[2]
opinion_dat$vocab[3]
opinion_dat$vocab[4]
opinion_dat$vocab[5]
opinion_dat$vocab[6]
opinion_dat$vocab[7]
opinion_dat$vocab[10]
opinion_dat$vocab[100]
opinion_dat$vocab[120]
opinion_dat$vocab[130]
opinion_dat$documents[[2]][1]
opinion_dat$documents[[1]]
opinion_dat$documents[[2]]
class(opinion_dat)
class("DocumentTermMatrix")
typeof(opinion_dat$documents[[1]])
class(opinion_dat$documents[[1]])
class(opinion_dat$documents)
?Map
length(opinion_dat$vocab)
dim(opinion_dtm)
union(opinion_dat$documents[1,])
union(Map(function(x){x[1,]}, opinion_dat$documents))
union(Map(function(x){x}, opinion_dat$documents))
?"union"
opinion_dat$documents[[1]][1,]
opinion_dat$documents[[1]][1000,]
opinion_dat$documents[[1000]][1,]
opinion_dat$documents[[6000]][1,]
union
Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents))
length(Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents)))
class(opinion_dat)
docs$documents
corpus
length(opinion_dat$documents)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents)
)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
Map(function(x){sum(x[2,])}, opinion_dat$documents)
unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
periods
foo
vector(mode="list", length=3)
p
opinion_dat
documents[[foo==1]]
corpus$documents[[foo==1]]
opinion_dat$documents[[foo==1]]
?Filter
bar
bar = list(3,4,5,2,5,6,2)
bar
bar[[3:5]]
bar[3:5]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t()
baz = corpus_seq_t(opinion_dat, periods)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
Map(function(x){sum(x[2,])},
opinion_dat$documents)
Reduce(max, Map(function(x){sum(x[2,])},
opinion_dat$documents))
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
baz = corpus_seq_t(opinion_dat, foo)
class(doc)
class(doc) != "matrix"
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[1]]
docs_by_period[[2]]
Reduce(min, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(ax, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period))
Reduce(min, Map(function(x){length(x)},docs_by_period))
Map(function(x){length(x)},docs_by_period)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
doc
typeof(doc)
class(doc)
class(doc)
class(doc) == "matrix"
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
opinion_dat$documents[[148]]
class(opinion_dat$documents[[148]])
opinion_dat$documents[[148]][1,]
rep(1,0)
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
NULL
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[1]]
docs_by_period[[2]]
docs_by_period[[3]]
docs_by_period[[4]]
unique(periods)
unique(foo)
foo == 1
which(foo == 1)
which(foo == 148)
which(foo == 147)
which(foo == 146)
which(foo == 145)
which(foo == 144)
which(foo == 143)
which(foo == 142)
which(foo == 141)
periods==p
foo==1000
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
p
periods==p
length(corpus$documents)
length(foo)
dim(opinion_dtm)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
periods = period_identity(opinion$date[-opinion_dtm_zero_idx])
periods = period_identity(opinion$date[-opinion_dtm_zero_idx], month)
periods
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[14]]
docs_by_period[[146]]
p
periods
rm(foo)
baz = corpus_seq_t(opinion_dat, periods)
baz
names(baz)
baz$len
baz$corpi
baz$corpi$docs[[1]]
baz$corpi$docs[[2]]
baz$corpi$docs
baz$corpi[[1]]
baz$corpi[[1]]$docs
baz$corpi[[1]]$docs[[1]]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, periods)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
vector(mode="numeric", length=3)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
system('pwd')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_vem.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_vem.cpp')
3.3 + 3.7 + 4 + 3 + 3.7 + 4 + 3 + 3.7 + 3.7 + 3.3 + 3.7 + 3.7 + 4 + 3.3 + 3 + 3.3 + 3.3 + 3.7 + 3.7 + 3.3 + 3.7 + 4 + 3.7 + 3.7 + 3 + 3 + 4 + 3.3 + 3.7 + 4 + 4 + 4
114.5/32
114.5/31
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
library(lubridate)
library(tm)
library(stringr)
source("/Users/patrickding/Documents/Projects/TopicModel/dataFuncs.R")
source("/Users/patrickding/Documents/Projects/TopicModel/dtm_funcs.R")
data(acq)
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
source('~/Documents/Projects/TopicModel/topicmodel/lda.R')
acq_lda <- lda(DocumentTermMatrix(acq), K=10, method="gibbs")
acq_lda$beta
class(acq_lda)
opinion <- readArticles("/Users/patrickding/Documents/Projects/TopicModel/opinion.csv")
#cartoon_idx <- str_detect(opinion$kicker, ignore.case("cartoon"))
#keep.idx <- opinion$article != "  " # cartoons have no text, drop them
#opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article[!cartoon_idx])))
opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
opinion.dtm <- DocumentTermMatrix(opinion.docs)
opinion.dtm.count <- rowSums(as.matrix(opinion.dtm))
opinion.dtm.zero.idx <- opinion.dtm.count == 0
opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article[!opinion.dtm.zero.idx])))
opinion.dtm <- DocumentTermMatrix(opinion.docs)
opinion.dtm <- removeSparseTerms(opinion.dtm, sparse=.99)
opinion_lda <- lda(dtm=opinion.dtm, K = 10, method = "gibbs")
rowSums(opinion_lda$beta)
colSums(opinion_lda$beta)
setwd("~/Documents/Projects/TopicModel/comment_type_topic_model")
source("prince_data_funcs.R")
articles <- readArticles("articles_1999.csv")
comments <- readComments("comments_1999.csv")
article_docs <- transformCorpus(Corpus(VectorSource(articles$article)))
class(article_docs)
commment_docs <- transformCorpus(Corpus(VectorSource(comments$comment)))
all_docs <- c(article_docs, comment_docs)
comment_docs <- transformCorpus(Corpus(VectorSource(comments$comment)))
all_docs <- c(article_docs, comment_docs)
all_docs[[1]]
all_docs[[2]]
all_docs[[2]]$content
all_docs[[1]]$content
all_docs[[3]]$content
all_docs[[4]]$content
all_docs[[5]]$content
all_docs[[6]]$content
typeof(all_docs)
?Filter
articles$id
all_id <- c(articles$id, comments$id)
all_id
length(unique(all_id))
all_docs[[1:5]]
all_docs[1:5
]
all_docs[1:5][[1]]
all_docs[1:5][[2]]
all_docs[1:5][[2]]$meta
typeof(all_docs[1:5][[2]]$meta)
not_empty_id <- Filter(function(x) x$content != "", all_id)
Map(function(x) x$content != "", all_docs)
all_id[Map(function(x) x$content != "", all_docs)]
all_id[unlist(Map(function(x) x$content != "", all_docs))]
length(all_id[unlist(Map(function(x) x$content != "", all_docs))])
rep(1, 10)
not_empty_id
all_type_id
all_type_id <- c(rep(1, length(article_docs)), rep(0, length(comment_docs)))
not_empty_id <- all_id[unlist(Map(function(x) x$content != "", all_docs))]
not_empty_docs <- all_docs[all_id]
not_empty_type_id <- all_type_id[unlist(Map(function(x) x$content != "", all_docs))]
not_empty_id
length(not_empty_docs)
length(all_docs)
all_id
all_docs[[1]]$content
all_docs[[1]]$content == ""
unlist(Map(function(x) x$content != "", all_docs))
sum(unlist(Map(function(x) x$content != "", all_docs)))
length(all_id)
not_empty_docs
sum(not_empty_id)
not_empty_id
length(not_etmpy_id)
length(not_empty_id)
not_empty_docs <- all_docs[not_empty_id]
length(not_empty_docs)
not_empty_type_id <- all_type_id[unlist(Map(function(x) x$content != "", all_docs))]
length(not_empty_type_id)
all_dtm <- DocumentTermMatrix(all_docs)
dim(all_dtm)
terms(all_dtm)
source('~/Documents/Projects/TopicModel/comment_type_topic_model/prince_data_funcs.R')
library("topicmodels", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
terms(all_dtm)
termFreq(all_dtm)
findFreqTerms(all_dtm)
findFreqTerms(all_dtm, lowfreq = 100)
findFreqTerms(all_dtm, lowfreq = 50)
findFreqTerms(all_dtm, lowfreq = 50, highfreq=60)
findFreqTerms(all_dtm, lowfreq = 20, highfreq=40)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=20)
findFreqTerms(all_dtm, lowfreq = 1, highfreq=10)
all_dtm <- removeSparseTerms(all_dtm, sparse=.99)
dim(all_dtm)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=20)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=50)
all_dtm <- DocumentTermMatrix(all_docs)
all_dtm <- removeSparseTerms(all_dtm, sparse=.995)
dim(all_dtm)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=50)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=40)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=30)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=20)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=21)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=25)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=24)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=23)
findFreqTerms(all_dtm, lowfreq = 10, highfreq=22)
dim(all_dtm)
which(rowSums(as.matrix(all_dtm)) == 0)
prince_dtm <- DocumentTermMatrix(not_empty_docs)
not_empty_docs
all_docs
which(not_empty_docs == NULL)
prince_dtm <- DocumentTermMatrix(not_empty_docs)
prince_dtm <- DocumentTermMatrix(all_docs)
prince_dtm <- removeSparseTerms(prince_dtm, sparse=.995)
prince_dtm <- prince_dtm[not_empty_id,]
length(not_empty_id)
dim(prince_dtm)
not_empty_id <- all_id[unlist(Map(function(x) x$content != "", all_docs))]
length(not_empty_id)
sum(unlist(Map(function(x) x$content != "", all_docs)))
length(unlist(Map(function(x) x$content != "", all_docs)))
prince_dtm <- prince_dtm[unlist(Map(function(x) x$content != "", all_docs)),]
dim(prince_dtm)
which(rowSums(prince_dtm) == 0)
which(rowSums(as.matrix(prince_dtm)) == 0)
prince_dtm <- DocumentTermMatrix(all_docs)
prince_dtm <- prince_dtm[unlist(Map(function(x) x$content != "", all_docs)),]
which(rowSums(as.matrix(prince_dtm)) == 0)
dim(prince_dtm)
prince_dtm <- DocumentTermMatrix(all_docs)
dim(prince_dtm)
prince_dtm_count <- rowSums(as.matrix(prince_dtm))
zero_idx <- prince_dtm_count == 0
sum(zero_idx)
zero_idx
all_type_id
type_id <- all_type_id[!zero_idx]
prince_docs <- transformCorpus(all_docs[!zero_idx])
length(prince_docs)
prince_dtm <- DocumentTermMatrix(prince_docs)
dim(prince_dtm)
which(rowSums(as.matrix(prince_dtm)) == 0)
prince_dtm <- removeSparseTerms(prince_dtm, sparse=.995)
which(rowSums(as.matrix(prince_dtm)) == 0)
prince_dtm <- DocumentTermMatrix(prince_docs)
prince_dtm <- removeSparseTerms(prince_dtm, sparse=.999)
which(rowSums(as.matrix(prince_dtm)) == 0)
findFreqTerms(prince_dtm, highfreq=10)
findFreqTerms(prince_dtm, highfreq=5)
prince_dtm <- DocumentTermMatrix(prince_docs)
dim(prince_dtm)
which(rowSums(as.matrix(prince_dtm)) == 2)
prince_docs[[352]]$content
prince_docs[[270]]$content
article[352,]
articles[352,]
articles[352,]$article
prince_docs[[753]]$content
articles[17,]$article
articles[17,]
articles[4,]
articles[46,]
few_idx <- prince_dtm_count < 10
type_id <- all_type_id[!few_idx]
prince_docs <- transformCorpus(all_docs[!few_idx])
prince_dtm <- DocumentTermMatrix(prince_docs)
dim(prince_dtm)
prince_dtm <- DocumentTermMatrix(all_docs)
prince_dtm_count <- rowSums(as.matrix(prince_dtm))
few_idx <- prince_dtm_count <= 0
type_id <- all_type_id[!few_idx]
prince_docs <- transformCorpus(all_docs[!few_idx])
prince_dtm <- DocumentTermMatrix(prince_docs)
prince_id <- all_id[!few_idx]
prince_id
length(prince_id)
dim(prince_dtm)
prince_id
prince_id[!type_id]
with_comment_id <- prince_id[type_id==0]
unique(with_comment_id)
length(unique(with_comment_id))
unique(comments$id)
unique(articles$id)
length(unique(articles$id))
dim(prince_dtm[type_id,])
prince_dtm[type_id,]
type_id
prince_dtm[logical(type_id),]
prince_dtm[type_id==1,]
dim(prince_dtm[type_id==1,])
dim(prince_dtm[type_id==0,])
length(prince_id[type_id==0,]
)
length(prince_id[type_id==0])
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('~/Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('util.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
