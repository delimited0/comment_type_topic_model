class(opinion_dtm[1,]) == "DocumentTermMatrix"
if(class(opinion_dtm[1,]) == "DocumentTermMatrix")
print(hi)
library(topicmodels)
?dtm2ldaformat
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
opinion_dat = dtm2ldaformat(opinion_dtm)
dim(opinion_dat[1])
dim(opinion_dat[[1])
dim(opinion_dat[[1]])
dim(opinion_dat[[2]])
opinion_dat[[1]]
length(opinion_dat[[1]])
opinion_dat[[1]][1]
library(lda)
?lexicalize
opinion_dat$vocav
opinion_dat$vocab
opinion_dat$vocab[1]
opinion_dat$vocab[2]
opinion_dat$vocab[3]
opinion_dat$vocab[4]
opinion_dat$vocab[5]
opinion_dat$vocab[6]
opinion_dat$vocab[7]
opinion_dat$vocab[10]
opinion_dat$vocab[100]
opinion_dat$vocab[120]
opinion_dat$vocab[130]
opinion_dat$documents[[2]][1]
opinion_dat$documents[[1]]
opinion_dat$documents[[2]]
class(opinion_dat)
class("DocumentTermMatrix")
typeof(opinion_dat$documents[[1]])
class(opinion_dat$documents[[1]])
class(opinion_dat$documents)
?Map
length(opinion_dat$vocab)
dim(opinion_dtm)
union(opinion_dat$documents[1,])
union(Map(function(x){x[1,]}, opinion_dat$documents))
union(Map(function(x){x}, opinion_dat$documents))
?"union"
opinion_dat$documents[[1]][1,]
opinion_dat$documents[[1]][1000,]
opinion_dat$documents[[1000]][1,]
opinion_dat$documents[[6000]][1,]
union
Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents))
length(Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents)))
class(opinion_dat)
docs$documents
corpus
length(opinion_dat$documents)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents)
)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
Map(function(x){sum(x[2,])}, opinion_dat$documents)
unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
periods
foo
vector(mode="list", length=3)
p
opinion_dat
documents[[foo==1]]
corpus$documents[[foo==1]]
opinion_dat$documents[[foo==1]]
?Filter
bar
bar = list(3,4,5,2,5,6,2)
bar
bar[[3:5]]
bar[3:5]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t()
baz = corpus_seq_t(opinion_dat, periods)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
Map(function(x){sum(x[2,])},
opinion_dat$documents)
Reduce(max, Map(function(x){sum(x[2,])},
opinion_dat$documents))
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
baz = corpus_seq_t(opinion_dat, foo)
class(doc)
class(doc) != "matrix"
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[1]]
docs_by_period[[2]]
Reduce(min, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(ax, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period))
Reduce(min, Map(function(x){length(x)},docs_by_period))
Map(function(x){length(x)},docs_by_period)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
doc
typeof(doc)
class(doc)
class(doc)
class(doc) == "matrix"
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
opinion_dat$documents[[148]]
class(opinion_dat$documents[[148]])
opinion_dat$documents[[148]][1,]
rep(1,0)
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
NULL
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[1]]
docs_by_period[[2]]
docs_by_period[[3]]
docs_by_period[[4]]
unique(periods)
unique(foo)
foo == 1
which(foo == 1)
which(foo == 148)
which(foo == 147)
which(foo == 146)
which(foo == 145)
which(foo == 144)
which(foo == 143)
which(foo == 142)
which(foo == 141)
periods==p
foo==1000
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
p
periods==p
length(corpus$documents)
length(foo)
dim(opinion_dtm)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
periods = period_identity(opinion$date[-opinion_dtm_zero_idx])
periods = period_identity(opinion$date[-opinion_dtm_zero_idx], month)
periods
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[14]]
docs_by_period[[146]]
p
periods
rm(foo)
baz = corpus_seq_t(opinion_dat, periods)
baz
names(baz)
baz$len
baz$corpi
baz$corpi$docs[[1]]
baz$corpi$docs[[2]]
baz$corpi$docs
baz$corpi[[1]]
baz$corpi[[1]]$docs
baz$corpi[[1]]$docs[[1]]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, periods)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
vector(mode="numeric", length=3)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
system('pwd')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_vem.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_vem.cpp')
3.3 + 3.7 + 4 + 3 + 3.7 + 4 + 3 + 3.7 + 3.7 + 3.3 + 3.7 + 3.7 + 4 + 3.3 + 3 + 3.3 + 3.3 + 3.7 + 3.7 + 3.3 + 3.7 + 4 + 3.7 + 3.7 + 3 + 3 + 4 + 3.3 + 3.7 + 4 + 4 + 4
114.5/32
114.5/31
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
library(lubridate)
library(tm)
library(stringr)
source("/Users/patrickding/Documents/Projects/TopicModel/dataFuncs.R")
source("/Users/patrickding/Documents/Projects/TopicModel/dtm_funcs.R")
data(acq)
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
source('~/Documents/Projects/TopicModel/topicmodel/lda.R')
acq_lda <- lda(DocumentTermMatrix(acq), K=10, method="gibbs")
acq_lda$beta
class(acq_lda)
opinion <- readArticles("/Users/patrickding/Documents/Projects/TopicModel/opinion.csv")
#cartoon_idx <- str_detect(opinion$kicker, ignore.case("cartoon"))
#keep.idx <- opinion$article != "  " # cartoons have no text, drop them
#opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article[!cartoon_idx])))
opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
opinion.dtm <- DocumentTermMatrix(opinion.docs)
opinion.dtm.count <- rowSums(as.matrix(opinion.dtm))
opinion.dtm.zero.idx <- opinion.dtm.count == 0
opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article[!opinion.dtm.zero.idx])))
opinion.dtm <- DocumentTermMatrix(opinion.docs)
opinion.dtm <- removeSparseTerms(opinion.dtm, sparse=.99)
opinion_lda <- lda(dtm=opinion.dtm, K = 10, method = "gibbs")
rowSums(opinion_lda$beta)
colSums(opinion_lda$beta)
setwd("~/Documents/Projects/TopicModel/comment_type_topic_model")
Rcpp::sourceCpp('article_comment_types_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
Rcpp::sourceCpp('util.cpp')
Rcpp::sourceCpp('article_comment_types_tm.cpp')
Rcpp::sourceCpp('article_comment_types_tm.cpp')
Rcpp::sourceCpp('util.cpp')
Rcpp::sourceCpp('article_comment_types_tm.cpp')
source("prince_data_funcs.R")
articles <- readArticles("articles_1999.csv")
comments <- readComments("comments_1999.csv")
# remove empty articles and empty comments
# remove articles with no comments
# remove comments to articles with no text
article_docs <- transformCorpus(Corpus(VectorSource(articles$article)))
comment_docs <- transformCorpus(Corpus(VectorSource(comments$comment)))
all_docs <- c(article_docs, comment_docs)
prince_dtm <- DocumentTermMatrix(all_docs)
prince_dtm_count <- rowSums(as.matrix(prince_dtm))
all_id <- c(articles$id, comments$id)
all_type_id <- c(rep(1, length(article_docs)), rep(0, length(comment_docs)))
all_articles_id <- all_id[all_type_id==1]
all_comments_id <- all_id[all_type_id==0]
few_idx <- prince_dtm_count <= 0
empty_article_id <- all_id[few_idx & all_type_id==1]
with_comment_idx <- all_id %in% all_comments_id
with_article_idx <- !(all_id %in% empty_article_id)
valid_idx <- !few_idx & with_comment_idx & with_article_idx
type_id <- all_type_id[valid_idx]
prince_id <- all_id[valid_idx]
articles_id <- prince_id[type_id==1]
comments_id <- prince_id[type_id==0]
prince_docs <- transformCorpus(all_docs[valid_idx])
prince_dtm <- DocumentTermMatrix(prince_docs)
article_idx <- sapply(comments_id, FUN=function(x){which(articles_id==x)})
articles_dtm <- prince_dtm[type_id==1,]
comments_dtm <- prince_dtm[type_id==0,]
install.packages("stringr")
source("prince_data_funcs.R")
articles <- readArticles("articles_1999.csv")
comments <- readComments("comments_1999.csv")
# remove empty articles and empty comments
# remove articles with no comments
# remove comments to articles with no text
article_docs <- transformCorpus(Corpus(VectorSource(articles$article)))
comment_docs <- transformCorpus(Corpus(VectorSource(comments$comment)))
all_docs <- c(article_docs, comment_docs)
prince_dtm <- DocumentTermMatrix(all_docs)
prince_dtm_count <- rowSums(as.matrix(prince_dtm))
all_id <- c(articles$id, comments$id)
all_type_id <- c(rep(1, length(article_docs)), rep(0, length(comment_docs)))
all_articles_id <- all_id[all_type_id==1]
all_comments_id <- all_id[all_type_id==0]
few_idx <- prince_dtm_count <= 0
empty_article_id <- all_id[few_idx & all_type_id==1]
with_comment_idx <- all_id %in% all_comments_id
with_article_idx <- !(all_id %in% empty_article_id)
valid_idx <- !few_idx & with_comment_idx & with_article_idx
type_id <- all_type_id[valid_idx]
prince_id <- all_id[valid_idx]
articles_id <- prince_id[type_id==1]
comments_id <- prince_id[type_id==0]
prince_docs <- transformCorpus(all_docs[valid_idx])
prince_dtm <- DocumentTermMatrix(prince_docs)
article_idx <- sapply(comments_id, FUN=function(x){which(articles_id==x)})
articles_dtm <- prince_dtm[type_id==1,]
comments_dtm <- prince_dtm[type_id==0,]
ls()
dir()
article_docs <- transformCorpus(Corpus(VectorSource(articles$article)))
article_docs
article_docs[[1]]
article_docs[[2]]
article_docs <- transformCorpus(Corpus(VectorSource(articles$article)))
docs[[1]]
docs[[2]]
docs[[2]]$content
docs[[2]]$content
docs[[2]]$content
docs[[2]]$content
docs[[2]]$content
article_docs <- transformCorpus(Corpus(VectorSource(articles$article)))
article_docs[[1]]
article_docs[[2]]
debugSource('~/Documents/Projects/TopicModel/comment_type_topic_model/prince_data_funcs.R')
article_docs <- transformCorpus(Corpus(VectorSource(articles$article)))
docs[[1]]$content
docs[[2]]$content
docs[[2]]$content
docs[[2]]$content
docs[[2]]$content
article_docs[[2]]
article_docs[[2]]$content
source('~/Documents/Projects/TopicModel/comment_type_topic_model/prince_data_funcs.R')
article_docs <- transformCorpus(Corpus(VectorSource(articles$article)))
source('~/Documents/Projects/TopicModel/comment_type_topic_model/prince_data_funcs.R')
article_docs <- transformCorpus(Corpus(VectorSource(articles$article)))
article_docs[[1]]
article_docs[[2]]
install.packages("SnowballC")
library("SnowballC", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
source('~/Documents/Projects/TopicModel/comment_type_topic_model/prince_data_funcs.R')
article_docs <- transformCorpus(Corpus(VectorSource(articles$article)))
article_docs[[2]]
article_docs[[2]]$content
comment_docs <- transformCorpus(Corpus(VectorSource(comments$comment)))
all_docs <- c(article_docs, comment_docs)
prince_dtm <- DocumentTermMatrix(all_docs)
prince_dtm_count <- rowSums(as.matrix(prince_dtm))
all_id <- c(articles$id, comments$id)
all_type_id <- c(rep(1, length(article_docs)), rep(0, length(comment_docs)))
all_articles_id <- all_id[all_type_id==1]
all_comments_id <- all_id[all_type_id==0]
few_idx <- prince_dtm_count <= 0
empty_article_id <- all_id[few_idx & all_type_id==1]
with_comment_idx <- all_id %in% all_comments_id
with_article_idx <- !(all_id %in% empty_article_id)
valid_idx <- !few_idx & with_comment_idx & with_article_idx
type_id <- all_type_id[valid_idx]
prince_id <- all_id[valid_idx]
articles_id <- prince_id[type_id==1]
comments_id <- prince_id[type_id==0]
prince_docs <- transformCorpus(all_docs[valid_idx])
prince_dtm <- DocumentTermMatrix(prince_docs)
article_idx <- sapply(comments_id, FUN=function(x){which(articles_id==x)})
articles_dtm <- prince_dtm[type_id==1,]
comments_dtm <- prince_dtm[type_id==0,]
Rcpp::sourceCpp('article_comment_types_tm.cpp')
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[5,]), comments = as.matrix(comments_dtm[article_idx==5,]),
article_id = rep(1, nrow(comments_dtm[article_idx==5,])), K = 5, S = 2, alpha = .1, eta_a = .01, eta_c = .01,
gamma_c = .01, iter = 1)
Rcpp::sourceCpp('article_comment_types_tm.cpp')
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[5,]), comments = as.matrix(comments_dtm[article_idx==5,]),
article_id = rep(1, nrow(comments_dtm[article_idx==5,])), K = 5, S = 2, alpha = .1, eta_a = .01, eta_c = .01,
gamma_c = .01, iter = 1)
prince_acttm$type_word_topic_count
prince_acttm$type_word_topic_count[1,]
prince_acttm$type_word_topic_count[1,1,1]
prince_acttm$type_word_topic_count[1,1,]
prince_acttm$type_word_topic_count[1,,]
prince_acttm$type_word_topic_count[2,,]
prince_acttm$type_word_topic_count[3,,]
min(prince_acttm$type_word_topic_count[1,,])
min(prince_acttm$type_word_topic_count[2,,])
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[c(6, 33),]), comments = as.matrix(comments_dtm[article_idx %in% c(6, 33),]),
article_id = c(rep(1, sum(article_idx==6)), rep(2, sum(article_idx==33))), K = 5, S = 2, alpha = .1, eta_a = .01,
eta_c = .01, gamma_c = .01, iter = 1)
Rcpp::sourceCpp('article_comment_types_tm.cpp')
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[1,]), comments = as.matrix(comments_dtm[article_idx==1,]),
article_id = rep(1, nrow(comments_dtm[article_idx==1,])), K = 5, S = 2, alpha = .1, eta_a = .01, eta_c = .01,
gamma_c = .01, iter = 1)
prince_acttm$beta_cs
prince_acttm$types
prince_acttm$theta
prince_acttm$pi
Rcpp::sourceCpp('article_comment_types_tm.cpp')
Rcpp::sourceCpp('test.cpp')
cube_test(2, 3, 4)
cube_test(2, 3, 2)
Rcpp::sourceCpp('article_comment_types_tm.cpp')
Rcpp::sourceCpp('article_comment_types_tm.cpp')
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[5,]), comments = as.matrix(comments_dtm[article_idx==5,]),
article_id = rep(1, nrow(comments_dtm[article_idx==5,])), K = 5, S = 2, alpha = .1, eta_a = .01, eta_c = .01,
gamma_c = .01, iter = 1)
prince_acttm$type_word_topic_count[,,1]
min(prince_acttm$type_word_topic_count[,,1])
min(prince_acttm$type_word_topic_count[,,2])
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[c(6, 33),]), comments = as.matrix(comments_dtm[article_idx %in% c(6, 33),]),
article_id = c(rep(1, sum(article_idx==6)), rep(2, sum(article_idx==33))), K = 5, S = 2, alpha = .1, eta_a = .01,
eta_c = .01, gamma_c = .01, iter = 1)
prince_acttm$beta_cs[[1]]
min(prince_acttm$beta_cs[[1]])
min(prince_acttm$beta_cs[[2]])
prince_acttm$types
sum(prince_acttm$types)
length(prince_acttm$types)
prince_acttm$pi
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[6,]), comments = as.matrix(comments_dtm[article_idx==6,]),
article_id = rep(1, nrow(comments_dtm[article_idx==6,])), K = 5, S = 2, alpha = .1, eta_a = .01, eta_c = .01,
gamma_c = .01, iter = 1)
prince_acttm$types
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[c(6, 33),]), comments = as.matrix(comments_dtm[article_idx %in% c(6, 33),]),
article_id = c(rep(1, sum(article_idx==6)), rep(2, sum(article_idx==33))), K = 5, S = 2, alpha = .1, eta_a = .01,
eta_c = .01, gamma_c = .01, iter = 10)
prince_acttm$types
prince_acttm$pi
prince_acttm$theta
Rcpp::sourceCpp('article_comment_types_tm.cpp')
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[c(6, 33),]), comments = as.matrix(comments_dtm[article_idx %in% c(6, 33),]),
article_id = c(rep(1, sum(article_idx==6)), rep(2, sum(article_idx==33))), K = 5, S = 2, alpha = .1, eta_a = .01,
eta_c = .01, gamma_c = .01, iter = 10)
Rcpp::sourceCpp('article_comment_types_tm.cpp')
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[5,]), comments = as.matrix(comments_dtm[article_idx==5,]),
article_id = rep(1, nrow(comments_dtm[article_idx==5,])), K = 5, S = 2, alpha = .1, eta_a = .01, eta_c = .01,
gamma_c = .01, iter = 1)
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm[c(6, 33),]), comments = as.matrix(comments_dtm[article_idx %in% c(6, 33),]),
article_id = c(rep(1, sum(article_idx==6)), rep(2, sum(article_idx==33))), K = 5, S = 2, alpha = .1, eta_a = .01,
eta_c = .01, gamma_c = .01, iter = 10)
Rcpp::sourceCpp('article_comment_types_tm.cpp')
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm), comments = as.matrix(comments_dtm),
article_id = article_idx, K = 10, S = 2, alpha = .1, eta_a = .01,
eta_c = .01, gamma_c = .01, iter = 1)
prince_acttm$pi
prince_acttm$beta_a
min(prince_acttm$beta_a)
min(prince_acttm$beta_cs[[1]])
min(prince_acttm$beta_cs[[2]])
prince_acttm$beta_cs[[1]]
prince_acttm <- article_comment_types_tm(articles = as.matrix(articles_dtm), comments = as.matrix(comments_dtm),
article_id = article_idx, K = 5, S = 2, alpha = .1, eta_a = .01,
eta_c = .01, gamma_c = .01, iter = 200)
prince_acttm$pi
prince_acttm$types
sum(prince_acttm$types)
length(prince_acttm$types)
1695*2
prince_acttm$pi
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
class(prince_acttm)
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
prince_acttm$beta_cs[[1]]
prince_acttm$beta_cs[[2]]
?apply
foo
foo < lapply(prince_acttm$beta_cs, )
?lapply
foo <- lapply(prince_acttm$beta_cs, term_score)
foo <- lapply(prince_acttm$beta_cs, function(x){term_score(x, T)})
foo[[1]]
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
prince_actm <- actm(articles_dtm = articles_dtm, comments_dtm = comments_dtm,
article_id = article_idx, K = 15)
gamma()
source('~/Documents/Projects/TopicModel/comment_type_topic_model/actm.R')
source('~/Documents/Projects/TopicModel/comment_type_topic_model/acttm.R')
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
methods(mean)
methods(get_topics)
methods(get_topics)
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
methods(get_topics)
prince_topics <- get_topics(prince_acttm, 20)
prince_topics <- get_topics(prince_acttm, 20)
prince_topics <- get_topics(prince_acttm, 20)
debugSource('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
prince_topics <- get_topics(prince_acttm, 20)
prince_acttm$vocab <- colnames(articles_dtm) # attach vocab manually
prince_topics <- get_topics(prince_acttm, 20)
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
prince_topics <- get_topics(prince_acttm, 20)
prince_topics$article_topics
prince_topics$comment_topics[[1]]
prince_topics$comment_topics[[2]]
Rcpp::sourceCpp('article_comment_types_tm.cpp')
Rcpp::sourceCpp('article_comment_types_tm.cpp')
source('~/Documents/Projects/TopicModel/comment_type_topic_model/posterior_stats.R')
source('~/Documents/Projects/TopicModel/comment_type_topic_model/actm.R')
Rcpp::sourceCpp('article_comment_types_tm.cpp')
Rcpp::sourceCpp('article_comment_tm.cpp')
